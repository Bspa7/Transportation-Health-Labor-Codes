},
error = function(e) {
message(paste("Error in the year", year_val, "quarter", quarter_val, ":", e$message))
return(NULL)
}
)
# Verify if the estimation was successful
if (!is.null(rd_result)) {
coef_robust <- rd_result$coef["Robust", ]
pv_robust <- rd_result$pv["Robust", ]
# Generate the rdplot graph
rd_plot <- rdplot(y = sample[[outcome_var]], x = sample[[cutoff_var]], binselect = "es")
plot <- rd_plot$rdplot
# Graph design
plot <- plot + theme_classic() +
labs(
title = "",
subtitle = "",
caption = paste0("period ", year_val, "q", quarter_val, "\n", outcome_var),
x = paste0("Distance to SISBEN cutoff (", gsub("[^0-9]", "", cutoff_var), "pts)\n",
"Running variable adjusted to elegibles individuals at the right side"),
y = "Mean of the outcome"
) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme(
legend.position = "none",
plot.caption = element_text(hjust = 0),
axis.title.x = element_text(size = 12, margin = margin(t = 10)),
axis.title.y = element_text(size = 12, margin = margin(r = 10)),
axis.title.x.bottom = element_text(size = 10, margin = margin(t = 5))
) +
annotate("text", x = Inf, y = Inf, label = paste0("coef=", round(coef_robust, 4), "\np_value=", round(pv_robust, 4)),
hjust = 1.1, vjust = 2, size = 3)
# Return to the graph
return(plot)
} else {
return(NULL)  # If the estimation fail, return to NULL
}
} else {
message(paste("There is not enough data in the yea", year_val, "quarter", quarter_val))
return(NULL)  # If there is not enough data, return NULL
}
}
# ----
# Main database
main_base <- open_dataset(sprintf('%s/%s', data_dir, 'base_pila_rips_pbid.parquet')) %>%
select(-puntaje, -cutoff30, -cutoff40, -cutoff30_origi, -cutoff40_origi) %>%
glimpse %>% collect()
#base_dir  <- "//wmedesrv/GAMMA/Christian Posso/_banrep_research/proyectos/project_transport_health"
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
master <- open_dataset(sprintf('%s/%s', project_folder, 'data/master.parquet')) %>%
select(personabasicaid, puntaje) %>% unique() %>% collect
# Main database
main_base <- open_dataset(sprintf('%s/%s', data_dir, 'base_pila_rips_pbid.parquet')) %>%
select(-puntaje, -cutoff30, -cutoff40, -cutoff30_origi, -cutoff40_origi) %>%
glimpse %>% collect()
View(main_base)
main_base <- main_base %>%
left_join(master, by='personabasicaid') %>%
centrar_puntaje() %>%
mutate(cutoff30_origi = cutoff30,
cutoff40_origi = cutoff40,
cutoff30 = cutoff30*-1,
cutoff40 = cutoff40*-1)
main_base2535 <- main_base %>%
filter(puntaje>=25 & puntaje<=35)
main_base2040 <- main_base %>%
filter(puntaje>=20 & puntaje<=40)
main_base3545 <- main_base %>%
filter(puntaje>=35 & puntaje<=45)
main_base3050 <- main_base %>%
filter(puntaje>=30 & puntaje<=50)
rm(master)
gc()
# 1. Definitions and functions -------------------------------------------------
# Define a variable to categorize age into group - RIPS
categorize_age <- function(df) {
df <- df %>%
mutate(
grupo_edad = case_when(
between(edad_RIPS , 18, 26) ~ 1,
between(edad_RIPS , 27, 59) ~ 2,
edad_RIPS >= 60 ~ 3
)
)
return(df)
}
# Define a function to create the running variables centered in zero
centrar_puntaje <- function(df) {
df <- df %>%
mutate(
cutoff30 = puntaje - 30.56,
cutoff40 = puntaje - 40
)
return(df)
}
# Define a function to save estimations
run_estimations <- function(data, var_name, cutoff_var, df_name) {
# Definir ventana de tiempo
years <- 2018:2019
quarters <- 1:4
# Empty Dataframe to save results
results_df <- data.frame(
coef_robust = numeric(),
se_robust = numeric(),
pv_robust = numeric(),
ci_lower_robust = numeric(),
ci_upper_robust = numeric(),
N1 = numeric(),
N2 = numeric(),
period = character(),
variable = character(),
dataset = character(),
control_mean = numeric(),
stringsAsFactors = FALSE
)
# Loop for each year and quarter
for (year_val in years) {
for (quarter_val in quarters) {
# Filter data for specific year and quarter
data_subset <- data %>%
filter(year(quarterly_date) == !!year_val & quarter(quarterly_date) == !!quarter_val) %>%
drop_na(all_of(c(var_name, cutoff_var)))
# Print some stats to verification
print(paste("Iteración con año:", year_val, "y trimestre:", quarter_val)) # Depuración
print(summary(data_subset$quarterly_date))
print(paste("N-rows en el subconjunto:", nrow(data_subset)))
# Verify if there are information to the estimation
if (nrow(data_subset) > 20) {
# Print the current information
cat("Variable:", var_name, "Cutoff:", cutoff_var, "Trimestre:", paste0(year_val, "q", quarter_val), "Hora:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")
# ESTIMATION!
est <- tryCatch(
{
rdrobust(data_subset[[var_name]], data_subset[[cutoff_var]], all=TRUE)
},
error = function(e) {
message(paste("Error en el año", year_val, "trimestre", quarter_val, ":", e$message))
return(NULL)
}
)
if (!is.null(est)) {
# Extract the values from robust estimation
coef_robust <- est$coef["Robust", ]
se_robust <- est$se["Robust", ]
pv_robust <- est$pv["Robust", ]
ci_lower_robust <- est$ci["Robust", "CI Lower"]
ci_upper_robust <- est$ci["Robust", "CI Upper"]
# Obtain sample size
N1 <- est$N[1]
N2 <- est$N[2]
# Define the group of control (values < 0)
control_group <- data_subset %>%
filter(data_subset[[cutoff_var]] < 0)
# Calculate the mean of the control group for the variable of interest
control_mean <- mean(control_group[[var_name]], na.rm = TRUE)
# Create a temporal data frame with the current results
temp_df <- data.frame(
coef_robust = coef_robust,
se_robust = se_robust,
pv_robust = pv_robust,
ci_lower_robust = ci_lower_robust,
ci_upper_robust = ci_upper_robust,
N1 = N1,
N2 = N2,
period = paste0(year_val, "q", quarter_val),
variable = var_name,
dataset = df_name,
control_mean = control_mean,
stringsAsFactors = FALSE
)
# Add the current results to the final data frame
results_df <- rbind(results_df, temp_df)
}
} else {
message(paste("Datos insuficientes para el año", year_val, "trimestre", quarter_val))
}
}
}
# Assign a specific name to the data frame
assign(df_name, results_df, envir = .GlobalEnv)
}
# Function to generate graphs (estimations)
plot_rd <- function(data, outcome_var, cutoff_var, year_val, quarter_val) {
# Fliter by year and quarter
sample <- data %>%
filter(year(quarterly_date) == !!year_val & quarter(quarterly_date) == !!quarter_val)
# Verify if the estimation is possible with the available data
if (nrow(sample) > 20) {
# Print the current information
cat("Variable:", outcome_var, "Cutoff:", cutoff_var, "Trimestre:", paste0(year_val, "q", quarter_val), "Hora:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")
# ESTIMATION!!
rd_result <- tryCatch(
{
rdrobust(sample[[outcome_var]], sample[[cutoff_var]], all=TRUE)
},
error = function(e) {
message(paste("Error in the year", year_val, "quarter", quarter_val, ":", e$message))
return(NULL)
}
)
# Verify if the estimation was successful
if (!is.null(rd_result)) {
coef_robust <- rd_result$coef["Robust", ]
pv_robust <- rd_result$pv["Robust", ]
# Generate the rdplot graph
rd_plot <- rdplot(y = sample[[outcome_var]], x = sample[[cutoff_var]], binselect = "es")
plot <- rd_plot$rdplot
# Graph design
plot <- plot + theme_classic() +
labs(
title = "",
subtitle = "",
caption = paste0("period ", year_val, "q", quarter_val, "\n", outcome_var),
x = paste0("Distance to SISBEN cutoff (", gsub("[^0-9]", "", cutoff_var), "pts)\n",
"Running variable adjusted to elegibles individuals at the right side"),
y = "Mean of the outcome"
) +
geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
theme(
legend.position = "none",
plot.caption = element_text(hjust = 0),
axis.title.x = element_text(size = 12, margin = margin(t = 10)),
axis.title.y = element_text(size = 12, margin = margin(r = 10)),
axis.title.x.bottom = element_text(size = 10, margin = margin(t = 5))
) +
annotate("text", x = Inf, y = Inf, label = paste0("coef=", round(coef_robust, 4), "\np_value=", round(pv_robust, 4)),
hjust = 1.1, vjust = 2, size = 3)
# Return to the graph
return(plot)
} else {
return(NULL)  # If the estimation fail, return to NULL
}
} else {
message(paste("There is not enough data in the yea", year_val, "quarter", quarter_val))
return(NULL)  # If there is not enough data, return NULL
}
}
# ----
# To verify my function
run_estimations(main_base, "n_consultas", "cutoff30", "est2535_verification")
# 3. Estimations on tables for each quarter ------------------------------------
# To verify my function
run_estimations(main_base, "n_consultas", "cutoff30", "est2535_verification")
# Balance using 30pts as the cutoff using sample into 25-35pts
run_estimations(main_base2535, "genero",      "cutoff30", "est2535_genero")
run_estimations(main_base2535, "edad_sisben", "cutoff30", "est2535_edad_sisben")
run_estimations(main_base2535, "estrato_1",   "cutoff30", "est2535_estrato_1")
run_estimations(main_base2535, "estrato_2",   "cutoff30", "est2535_estrato_2")
run_estimations(main_base2535, "estrato_3",   "cutoff30", "est2535_estrato_3")
run_estimations(main_base2535, "estrato_4",   "cutoff30", "est2535_estrato_4")
run_estimations(main_base2535, "estrato_5",   "cutoff30", "est2535_estrato_5")
run_estimations(main_base2535, "estrato_6",   "cutoff30", "est2535_estrato_6")
run_estimations(main_base2535, "activi_sin",  "cutoff30", "est2535_activi_sin")
run_estimations(main_base2535, "activi_tra",  "cutoff30", "est2535_activi_tra")
run_estimations(main_base2535, "activi_bus",  "cutoff30", "est2535_activi_bus")
run_estimations(main_base2535, "activi_est",  "cutoff30", "est2535_activi_est")
run_estimations(main_base2535, "activi_hog",  "cutoff30", "est2535_activi_hog")
run_estimations(main_base2535, "estcivil_unlibr",   "cutoff30", "est2535_estcivil_unlibr")
run_estimations(main_base2535, "estcivil_casado",   "cutoff30", "est2535_estcivil_casado")
run_estimations(main_base2535, "estcivil_solter",   "cutoff30", "est2535_estcivil_solter")
run_estimations(main_base2535, "anios_educacion",   "cutoff30", "est2535_anios_educacion")
run_estimations(main_base2535, "ingresos",          "cutoff30", "est2535_ingresos")
# Main estimations using 30pts as the cutoff using sample into 25-35pts
run_estimations(main_base2535, "n_registros",    "cutoff30", "est2535_registros")
run_estimations(main_base2535, "d_registros",    "cutoff30", "est2535_d_registros")
run_estimations(main_base2535, "ibc_salud",      "cutoff30", "est2535_ibc_salud")
run_estimations(main_base2535, "sal_dias_cot",   "cutoff30", "est2535_sal_dias_cot")
run_estimations(main_base2535, "pila_indep",     "cutoff30", "est2535_indep")
run_estimations(main_base2535, "pila_depen",     "cutoff30", "est2535_depen")
run_estimations(main_base2535, "n_visitas",      "cutoff30", "est2535_visitas")
run_estimations(main_base2535, "c_preven",       "cutoff30", "est2535_c_prev")
run_estimations(main_base2535, "c_prenat",       "cutoff30", "est2535_c_pren")
run_estimations(main_base2535, "c_cancer",       "cutoff30", "est2535_c_cancer")
run_estimations(main_base2535, "c_cardio",       "cutoff30", "est2535_c_cardio")
run_estimations(main_base2535, "c_respir",       "cutoff30", "est2535_c_respir")
run_estimations(main_base2535, "n_consultas",    "cutoff30", "est2535_consultas")
run_estimations(main_base2535, "n_hospitalizaciones", "cutoff30", "est2535_hosp")
run_estimations(main_base2535, "n_procedimientos",    "cutoff30", "est2535_proc")
run_estimations(main_base2535, "n_urgencias",         "cutoff30", "est2535_urgencias")
run_estimations(main_base2535, "d_visitas",      "cutoff30", "est2535_d_visitas")
run_estimations(main_base2535, "d_consultas",    "cutoff30", "est2535_d_consultas")
run_estimations(main_base2535, "d_hospitalizaciones", "cutoff30", "est2535_d_hosp")
run_estimations(main_base2535, "d_procedimientos",    "cutoff30", "est2535_d_proc")
run_estimations(main_base2535, "d_urgencias",         "cutoff30", "est2535_d_urgencias")
run_estimations(main_base2535, "d_cancer",       "cutoff30", "est2535_d_cancer")
run_estimations(main_base2535, "d_cardio",       "cutoff30", "est2535_d_cardio")
run_estimations(main_base2535, "d_preven",       "cutoff30", "est2535_d_preven")
run_estimations(main_base2535, "d_prenat",       "cutoff30", "est2535_d_prenat")
run_estimations(main_base2535, "d_respir",       "cutoff30", "est2535_d_respir")
# Balance using 30pts as the cutoff using sample into 20-40pts
run_estimations(main_base2040, "genero",      "cutoff30", "est2040_genero")
run_estimations(main_base2040, "edad_sisben", "cutoff30", "est2040_edad_sisben")
run_estimations(main_base2040, "estrato_1",   "cutoff30", "est2040_estrato_1")
run_estimations(main_base2040, "estrato_2",   "cutoff30", "est2040_estrato_2")
run_estimations(main_base2040, "estrato_3",   "cutoff30", "est2040_estrato_3")
run_estimations(main_base2040, "estrato_4",   "cutoff30", "est2040_estrato_4")
run_estimations(main_base2040, "estrato_5",   "cutoff30", "est2040_estrato_5")
run_estimations(main_base2040, "estrato_6",   "cutoff30", "est2040_estrato_6")
run_estimations(main_base2040, "activi_sin",  "cutoff30", "est2040_activi_sin")
run_estimations(main_base2040, "activi_tra",  "cutoff30", "est2040_activi_tra")
run_estimations(main_base2040, "activi_bus",  "cutoff30", "est2040_activi_bus")
run_estimations(main_base2040, "activi_est",  "cutoff30", "est2040_activi_est")
run_estimations(main_base2040, "activi_hog",  "cutoff30", "est2040_activi_hog")
run_estimations(main_base2040, "estcivil_unlibr",   "cutoff30", "est2040_estcivil_unlibr")
run_estimations(main_base2040, "estcivil_casado",   "cutoff30", "est2040_estcivil_casado")
run_estimations(main_base2040, "estcivil_solter",   "cutoff30", "est2040_estcivil_solter")
run_estimations(main_base2040, "anios_educacion",   "cutoff30", "est2040_anios_educacion")
run_estimations(main_base2040, "ingresos",          "cutoff30", "est2040_ingresos")
# Main estimations using 30pts as the cutoff using sample into 20-40pts
run_estimations(main_base2040, "n_registros",    "cutoff30", "est2040_registros")
run_estimations(main_base2040, "d_registros",    "cutoff30", "est2040_d_registros")
run_estimations(main_base2040, "ibc_salud",      "cutoff30", "est2040_ibc_salud")
run_estimations(main_base2040, "sal_dias_cot",   "cutoff30", "est2040_sal_dias_cot")
run_estimations(main_base2040, "pila_indep",     "cutoff30", "est2040_indep")
run_estimations(main_base2040, "pila_depen",     "cutoff30", "est2040_depen")
run_estimations(main_base2040, "n_visitas",      "cutoff30", "est2040_visitas")
run_estimations(main_base2040, "c_preven",       "cutoff30", "est2040_c_prev")
run_estimations(main_base2040, "c_prenat",       "cutoff30", "est2040_c_pren")
run_estimations(main_base2040, "c_cancer",       "cutoff30", "est2040_c_cancer")
run_estimations(main_base2040, "c_cardio",       "cutoff30", "est2040_c_cardio")
run_estimations(main_base2040, "c_respir",       "cutoff30", "est2040_c_respir")
run_estimations(main_base2040, "n_consultas",    "cutoff30", "est2040_consultas")
run_estimations(main_base2040, "n_hospitalizaciones", "cutoff30", "est2040_hosp")
run_estimations(main_base2040, "n_procedimientos",    "cutoff30", "est2040_proc")
run_estimations(main_base2040, "n_urgencias",         "cutoff30", "est2040_urgencias")
run_estimations(main_base2040, "d_visitas",      "cutoff30", "est2040_d_visitas")
run_estimations(main_base2040, "d_consultas",    "cutoff30", "est2040_d_consultas")
run_estimations(main_base2040, "d_hospitalizaciones", "cutoff30", "est2040_d_hosp")
run_estimations(main_base2040, "d_procedimientos",    "cutoff30", "est2040_d_proc")
run_estimations(main_base2040, "d_urgencias",         "cutoff30", "est2040_d_urgencias")
run_estimations(main_base2040, "d_cancer",       "cutoff30", "est2040_d_cancer")
run_estimations(main_base2040, "d_cardio",       "cutoff30", "est2040_d_cardio")
run_estimations(main_base2040, "d_preven",       "cutoff30", "est2040_d_preven")
run_estimations(main_base2040, "d_prenat",       "cutoff30", "est2040_d_prenat")
run_estimations(main_base2040, "d_respir",       "cutoff30", "est2040_d_respir")
# Balance using 40pts as the cutoff using sample into 35-45pts
run_estimations(main_base3545, "genero",      "cutoff40", "est3545_genero")
run_estimations(main_base3545, "edad_sisben", "cutoff40", "est3545_edad_sisben")
run_estimations(main_base3545, "estrato_1",   "cutoff40", "est3545_estrato_1")
run_estimations(main_base3545, "estrato_2",   "cutoff40", "est3545_estrato_2")
run_estimations(main_base3545, "estrato_3",   "cutoff40", "est3545_estrato_3")
run_estimations(main_base3545, "estrato_4",   "cutoff40", "est3545_estrato_4")
run_estimations(main_base3545, "estrato_5",   "cutoff40", "est3545_estrato_5")
run_estimations(main_base3545, "estrato_6",   "cutoff40", "est3545_estrato_6")
run_estimations(main_base3545, "activi_sin",  "cutoff40", "est3545_activi_sin")
run_estimations(main_base3545, "activi_tra",  "cutoff40", "est3545_activi_tra")
run_estimations(main_base3545, "activi_bus",  "cutoff40", "est3545_activi_bus")
run_estimations(main_base3545, "activi_est",  "cutoff40", "est3545_activi_est")
run_estimations(main_base3545, "activi_hog",  "cutoff40", "est3545_activi_hog")
run_estimations(main_base3545, "estcivil_unlibr",   "cutoff40", "est3545_estcivil_unlibr")
run_estimations(main_base3545, "estcivil_casado",   "cutoff40", "est3545_estcivil_casado")
run_estimations(main_base3545, "estcivil_solter",   "cutoff40", "est3545_estcivil_solter")
run_estimations(main_base3545, "anios_educacion",   "cutoff40", "est3545_anios_educacion")
run_estimations(main_base3545, "ingresos",          "cutoff40", "est3545_ingresos")
# Main estimations using 40pts as the cutoff using sample into 35-45pts
run_estimations(main_base3545, "n_registros",    "cutoff40", "est3545_registros")
run_estimations(main_base3545, "d_registros",    "cutoff40", "est3545_d_registros")
run_estimations(main_base3545, "ibc_salud",      "cutoff40", "est3545_ibc_salud")
run_estimations(main_base3545, "sal_dias_cot",   "cutoff40", "est3545_sal_dias_cot")
run_estimations(main_base3545, "pila_indep",     "cutoff40", "est3545_indep")
run_estimations(main_base3545, "pila_depen",     "cutoff40", "est3545_depen")
run_estimations(main_base3545, "n_visitas",      "cutoff40", "est3545_visitas")
run_estimations(main_base3545, "c_preven",       "cutoff40", "est3545_c_prev")
run_estimations(main_base3545, "c_prenat",       "cutoff40", "est3545_c_pren")
run_estimations(main_base3545, "c_cancer",       "cutoff40", "est3545_c_cancer")
run_estimations(main_base3545, "c_cardio",       "cutoff40", "est3545_c_cardio")
run_estimations(main_base3545, "c_respir",       "cutoff40", "est3545_c_respir")
run_estimations(main_base3545, "n_consultas",    "cutoff40", "est3545_consultas")
run_estimations(main_base3545, "n_hospitalizaciones", "cutoff40", "est3545_hosp")
run_estimations(main_base3545, "n_procedimientos",    "cutoff40", "est3545_proc")
run_estimations(main_base3545, "n_urgencias",         "cutoff40", "est3545_urgencias")
run_estimations(main_base3545, "d_visitas",      "cutoff40", "est3545_d_visitas")
run_estimations(main_base3545, "d_consultas",    "cutoff40", "est3545_d_consultas")
run_estimations(main_base3545, "d_hospitalizaciones", "cutoff40", "est3545_d_hosp")
run_estimations(main_base3545, "d_procedimientos",    "cutoff40", "est3545_d_proc")
run_estimations(main_base3545, "d_urgencias",         "cutoff40", "est3545_d_urgencias")
run_estimations(main_base3545, "d_cancer",       "cutoff40", "est3545_d_cancer")
run_estimations(main_base3545, "d_cardio",       "cutoff40", "est3545_d_cardio")
run_estimations(main_base3545, "d_preven",       "cutoff40", "est3545_d_preven")
run_estimations(main_base3545, "d_prenat",       "cutoff40", "est3545_d_prenat")
run_estimations(main_base3545, "d_respir",       "cutoff40", "est3545_d_respir")
# Balance using 40pts as the cutoff using sample into 30-50pts
run_estimations(main_base3050, "genero",      "cutoff40", "est3050_genero")
run_estimations(main_base3050, "edad_sisben", "cutoff40", "est3050_edad_sisben")
run_estimations(main_base3050, "estrato_1",   "cutoff40", "est3050_estrato_1")
run_estimations(main_base3050, "estrato_2",   "cutoff40", "est3050_estrato_2")
run_estimations(main_base3050, "estrato_3",   "cutoff40", "est3050_estrato_3")
run_estimations(main_base3050, "estrato_4",   "cutoff40", "est3050_estrato_4")
run_estimations(main_base3050, "estrato_5",   "cutoff40", "est3050_estrato_5")
run_estimations(main_base3050, "estrato_6",   "cutoff40", "est3050_estrato_6")
run_estimations(main_base3050, "activi_sin",  "cutoff40", "est3050_activi_sin")
run_estimations(main_base3050, "activi_tra",  "cutoff40", "est3050_activi_tra")
run_estimations(main_base3050, "activi_bus",  "cutoff40", "est3050_activi_bus")
run_estimations(main_base3050, "activi_est",  "cutoff40", "est3050_activi_est")
run_estimations(main_base3050, "activi_hog",  "cutoff40", "est3050_activi_hog")
run_estimations(main_base3050, "estcivil_unlibr",   "cutoff40", "est3050_estcivil_unlibr")
run_estimations(main_base3050, "estcivil_casado",   "cutoff40", "est3050_estcivil_casado")
run_estimations(main_base3050, "estcivil_solter",   "cutoff40", "est3050_estcivil_solter")
run_estimations(main_base3050, "anios_educacion",   "cutoff40", "est3050_anios_educacion")
run_estimations(main_base3050, "ingresos",          "cutoff40", "est3050_ingresos")
# Main estimations using 40pts as the cutoff using sample into 30-50pts
run_estimations(main_base3050, "n_registros",    "cutoff40", "est3050_registros")
run_estimations(main_base3050, "d_registros",    "cutoff40", "est3050_d_registros")
run_estimations(main_base3050, "ibc_salud",      "cutoff40", "est3050_ibc_salud")
run_estimations(main_base3050, "sal_dias_cot",   "cutoff40", "est3050_sal_dias_cot")
run_estimations(main_base3050, "pila_indep",     "cutoff40", "est3050_indep")
run_estimations(main_base3050, "pila_depen",     "cutoff40", "est3050_depen")
run_estimations(main_base3050, "n_visitas",      "cutoff40", "est3050_visitas")
run_estimations(main_base3050, "c_preven",       "cutoff40", "est3050_c_prev")
run_estimations(main_base3050, "c_prenat",       "cutoff40", "est3050_c_pren")
run_estimations(main_base3050, "c_cancer",       "cutoff40", "est3050_c_cancer")
run_estimations(main_base3050, "c_cardio",       "cutoff40", "est3050_c_cardio")
run_estimations(main_base3050, "c_respir",       "cutoff40", "est3050_c_respir")
run_estimations(main_base3050, "n_consultas",    "cutoff40", "est3050_consultas")
run_estimations(main_base3050, "n_hospitalizaciones", "cutoff40", "est3050_hosp")
run_estimations(main_base3050, "n_procedimientos",    "cutoff40", "est3050_proc")
run_estimations(main_base3050, "n_urgencias",         "cutoff40", "est3050_urgencias")
run_estimations(main_base3050, "d_visitas",      "cutoff40", "est3050_d_visitas")
run_estimations(main_base3050, "d_consultas",    "cutoff40", "est3050_d_consultas")
run_estimations(main_base3050, "d_hospitalizaciones", "cutoff40", "est3050_d_hosp")
run_estimations(main_base3050, "d_procedimientos",    "cutoff40", "est3050_d_proc")
run_estimations(main_base3050, "d_urgencias",         "cutoff40", "est3050_d_urgencias")
run_estimations(main_base3050, "d_cancer",       "cutoff40", "est3050_d_cancer")
run_estimations(main_base3050, "d_cardio",       "cutoff40", "est3050_d_cardio")
run_estimations(main_base3050, "d_preven",       "cutoff40", "est3050_d_preven")
run_estimations(main_base3050, "d_prenat",       "cutoff40", "est3050_d_prenat")
run_estimations(main_base3050, "d_respir",       "cutoff40", "est3050_d_respir")
# ----
list_est <- mget(ls(pattern = "^est(2535|2040|3545|3050)_"))
est_cut <- bind_rows(list_est)
View(list_est)
View(est_cut)
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
# Directory and creating a new folder to save all the results
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
results <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240802-table_est_v2.parquet')) %>% collect()
results$mean_control <- round(results$mean_control, 3)
# Results from Aug 02, 2024 (Estimations using different groups)
results <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240801-table_est_v2.parquet')) %>% collect()
View(results)
View(results)
results$mean_control <- round(results$mean_control, 3)
results$control_mean <- round(results$control_mean, 3)
View(results)
write.xlsx(control_mean, file = file.path(output_folder, "20240801-table_est_v2.xlsx"))
write.xlsx(results, file = file.path(output_folder, "20240801-table_est_v2.xlsx"))
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
# Directory and creating a new folder to save all the results
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
# Reading results from 14-aug-2024, results with global descriptives
results <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240814-gnral_stats.parquet')) %>% collect()
View(results)
write.xlsx(results, file = file.path(output_folder, "20240814-gnral_stats.xlsx"))
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
# Directory and creating a new folder to save all the results
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
results <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240826-gnral_counts.parquet')) %>% collect()
write.xlsx(results, file = file.path(output_folder, "20240826-gnral_counts.xlsx"))
results <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240826-gnral_stats.parquet')) %>% collect()
write.xlsx(results, file = file.path(output_folder, "20240826-gnral_stats.xlsx"))
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
# Directory and creating a new folder to save all the results
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
# Loop para iterar sobre los números del 1 al 6
for (i in 1:6) {
# Construir el nombre del archivo .parquet
parquet_file <- sprintf("20240905-stats_set1_step%d.parquet", i)
# Abrir el archivo .parquet y recolectar los datos
results <- open_dataset(sprintf('%s/%s', output_folder, paste0('parquet/', parquet_file))) %>% collect()
# Guardar los datos en formato .xlsx
write.xlsx(results, file = file.path(output_folder, paste0(parquet_file, ".xlsx")))
}

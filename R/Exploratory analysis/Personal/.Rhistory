s4245_f  = mean(!!sym(var_name) * (score_4045 == 1 & genero == 0), na.rm = TRUE)
))
}
}
# Función principal para calcular estadísticas a nivel anual
calcular_stats_anuales <- function(data, var_name, tipo_variable) {
data %>%
# Crear la variable de año a partir de monthly_date
mutate(year = lubridate::year(monthly_date)) %>%
# Agrupar por año
group_by(year) %>%
calcular_subgrupos_anual(var_name, tipo_variable) %>%
rename_with(~paste(var_name, ., sep = "_"), -year) %>%
ungroup()
}
calcular_estadisticas_ingreso_anual <- function(data, var_name) {
# Crear la variable de año a partir de monthly_date
data <- data %>%
mutate(year = lubridate::year(monthly_date))
# Calcular estadísticas para la población total a nivel anual
resumen_total_anual <- data %>%
group_by(year) %>%
summarise(
promedio_total = mean(!!sym(var_name), na.rm = TRUE),
mediana_total = median(!!sym(var_name), na.rm = TRUE),
p10_total = quantile(!!sym(var_name), 0.10, na.rm = TRUE),
p25_total = quantile(!!sym(var_name), 0.25, na.rm = TRUE),
p75_total = quantile(!!sym(var_name), 0.75, na.rm = TRUE),
p90_total = quantile(!!sym(var_name), 0.90, na.rm = TRUE)
)
# Función para calcular estadísticas por subgrupo a nivel anual
calcular_estadisticas_subgrupo_anual <- function(data, score_var, suffix) {
data %>%
filter(!!sym(score_var) == 1) %>%
group_by(year) %>%
summarise(
!!paste0("promedio_", suffix) := mean(!!sym(var_name), na.rm = TRUE),
!!paste0("mediana_", suffix) := median(!!sym(var_name), na.rm = TRUE),
!!paste0("p10_", suffix) := quantile(!!sym(var_name), 0.10, na.rm = TRUE),
!!paste0("p25_", suffix) := quantile(!!sym(var_name), 0.25, na.rm = TRUE),
!!paste0("p75_", suffix) := quantile(!!sym(var_name), 0.75, na.rm = TRUE),
!!paste0("p90_", suffix) := quantile(!!sym(var_name), 0.90, na.rm = TRUE)
)
}
# Calcular estadísticas para cada subgrupo a nivel anual
resumen_1520_anual <- calcular_estadisticas_subgrupo_anual(data, "score_1520", "1520")
resumen_2025_anual <- calcular_estadisticas_subgrupo_anual(data, "score_2025", "2025")
resumen_2530_anual <- calcular_estadisticas_subgrupo_anual(data, "score_2530", "2530")
resumen_3035_anual <- calcular_estadisticas_subgrupo_anual(data, "score_3035", "3035")
resumen_3540_anual <- calcular_estadisticas_subgrupo_anual(data, "score_3540", "3540")
resumen_4245_anual <- calcular_estadisticas_subgrupo_anual(data, "score_4045", "4245")
# Combinar todas las estadísticas anuales en un solo dataframe
resumen_total_anual %>%
left_join(resumen_1520_anual, by = "year") %>%
left_join(resumen_2025_anual, by = "year") %>%
left_join(resumen_2530_anual, by = "year") %>%
left_join(resumen_3035_anual, by = "year") %>%
left_join(resumen_3540_anual, by = "year") %>%
left_join(resumen_4245_anual, by = "year")
}
# ----
# Monthly Functions ------------------------------------------------------------
# Función auxiliar para calcular sumas o promedios para subgrupos
calcular_subgrupos <- function(data, var_name, tipo_calculo) {
if (tipo_calculo == "conteo") {
return(data %>%
summarise(
total   = sum(!!sym(var_name), na.rm = TRUE),
male    = sum(!!sym(var_name) * (genero == 1), na.rm = TRUE),
female  = sum(!!sym(var_name) * (genero == 0), na.rm = TRUE),
s1520   = sum(!!sym(var_name) * (score_1520 == 1), na.rm = TRUE),
s2025   = sum(!!sym(var_name) * (score_2025 == 1), na.rm = TRUE),
s2530   = sum(!!sym(var_name) * (score_2530 == 1), na.rm = TRUE),
s3035   = sum(!!sym(var_name) * (score_3035 == 1), na.rm = TRUE),
s3540   = sum(!!sym(var_name) * (score_3540 == 1), na.rm = TRUE),
s4245   = sum(!!sym(var_name) * (score_4045 == 1), na.rm = TRUE),
s1520_m = sum(!!sym(var_name) * (score_1520 == 1 & genero == 1), na.rm = TRUE),
s1520_f = sum(!!sym(var_name) * (score_1520 == 1 & genero == 0), na.rm = TRUE),
s2025_m = sum(!!sym(var_name) * (score_2025 == 1 & genero == 1), na.rm = TRUE),
s2025_f = sum(!!sym(var_name) * (score_2025 == 1 & genero == 0), na.rm = TRUE),
s2530_m = sum(!!sym(var_name) * (score_2530 == 1 & genero == 1), na.rm = TRUE),
s2530_f = sum(!!sym(var_name) * (score_2530 == 1 & genero == 0), na.rm = TRUE),
s3035_m = sum(!!sym(var_name) * (score_3035 == 1 & genero == 1), na.rm = TRUE),
s3035_f = sum(!!sym(var_name) * (score_3035 == 1 & genero == 0), na.rm = TRUE),
s3540_m = sum(!!sym(var_name) * (score_3540 == 1 & genero == 1), na.rm = TRUE),
s3540_f = sum(!!sym(var_name) * (score_3540 == 1 & genero == 0), na.rm = TRUE),
s4245_m = sum(!!sym(var_name) * (score_4045 == 1 & genero == 1), na.rm = TRUE),
s4245_f = sum(!!sym(var_name) * (score_4045 == 1 & genero == 0), na.rm = TRUE)
))
} else if (tipo_calculo == "continuo") {
return(data %>%
summarise(
promedio = mean(!!sym(var_name), na.rm = TRUE),
male     = mean(!!sym(var_name) * (genero == 1), na.rm = TRUE),
female   = mean(!!sym(var_name) * (genero == 0), na.rm = TRUE),
s1520    = mean(!!sym(var_name) * (score_1520 == 1), na.rm = TRUE),
s2025    = mean(!!sym(var_name) * (score_2025 == 1), na.rm = TRUE),
s2530    = mean(!!sym(var_name) * (score_2530 == 1), na.rm = TRUE),
s3035    = mean(!!sym(var_name) * (score_3035 == 1), na.rm = TRUE),
s3540    = mean(!!sym(var_name) * (score_3540 == 1), na.rm = TRUE),
s4245    = mean(!!sym(var_name) * (score_4045 == 1), na.rm = TRUE),
s1520_m  = mean(!!sym(var_name) * (score_1520 == 1 & genero == 1), na.rm = TRUE),
s1520_f  = mean(!!sym(var_name) * (score_1520 == 1 & genero == 0), na.rm = TRUE),
s2025_m  = mean(!!sym(var_name) * (score_2025 == 1 & genero == 1), na.rm = TRUE),
s2025_f  = mean(!!sym(var_name) * (score_2025 == 1 & genero == 0), na.rm = TRUE),
s2530_m  = mean(!!sym(var_name) * (score_2530 == 1 & genero == 1), na.rm = TRUE),
s2530_f  = mean(!!sym(var_name) * (score_2530 == 1 & genero == 0), na.rm = TRUE),
s3035_m  = mean(!!sym(var_name) * (score_3035 == 1 & genero == 1), na.rm = TRUE),
s3035_f  = mean(!!sym(var_name) * (score_3035 == 1 & genero == 0), na.rm = TRUE),
s3540_m  = mean(!!sym(var_name) * (score_3540 == 1 & genero == 1), na.rm = TRUE),
s3540_f  = mean(!!sym(var_name) * (score_3540 == 1 & genero == 0), na.rm = TRUE),
s4245_m  = mean(!!sym(var_name) * (score_4045 == 1 & genero == 1), na.rm = TRUE),
s4245_f  = mean(!!sym(var_name) * (score_4045 == 1 & genero == 0), na.rm = TRUE)
))
}
}
# Función principal para calcular estadísticas
calcular_stats <- function(data, var_name, tipo_variable) {
data %>%
group_by(monthly_date) %>%
calcular_subgrupos(var_name, tipo_variable) %>%
rename_with(~paste(var_name, ., sep = "_"), -monthly_date) %>%
ungroup()
}
calcular_estadisticas_ingreso_mensual <- function(data, var_name) {
# Calcular estadísticas para la población total a nivel mensual
resumen_total_mensual <- data %>%
group_by(monthly_date) %>%
summarise(
promedio_total = mean(!!sym(var_name), na.rm = TRUE),
mediana_total = median(!!sym(var_name), na.rm = TRUE),
p10_total = quantile(!!sym(var_name), 0.10, na.rm = TRUE),
p25_total = quantile(!!sym(var_name), 0.25, na.rm = TRUE),
p75_total = quantile(!!sym(var_name), 0.75, na.rm = TRUE),
p90_total = quantile(!!sym(var_name), 0.90, na.rm = TRUE)
)
# Función para calcular estadísticas por subgrupo a nivel mensual
calcular_estadisticas_subgrupo_mensual <- function(data, score_var, suffix) {
data %>%
filter(!!sym(score_var) == 1) %>%
group_by(monthly_date) %>%
summarise(
!!paste0("promedio_", suffix) := mean(!!sym(var_name), na.rm = TRUE),
!!paste0("mediana_", suffix) := median(!!sym(var_name), na.rm = TRUE),
!!paste0("p10_", suffix) := quantile(!!sym(var_name), 0.10, na.rm = TRUE),
!!paste0("p25_", suffix) := quantile(!!sym(var_name), 0.25, na.rm = TRUE),
!!paste0("p75_", suffix) := quantile(!!sym(var_name), 0.75, na.rm = TRUE),
!!paste0("p90_", suffix) := quantile(!!sym(var_name), 0.90, na.rm = TRUE)
)
}
# Calcular estadísticas para cada subgrupo a nivel mensual
resumen_1520_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_1520", "1520")
resumen_2025_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_2025", "2025")
resumen_2530_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_2530", "2530")
resumen_3035_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_3035", "3035")
resumen_3540_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_3540", "3540")
resumen_4245_mensual <- calcular_estadisticas_subgrupo_mensual(data, "score_4045", "4245")
# Combinar todas las estadísticas mensuales en un solo dataframe
resumen_total_mensual %>%
left_join(resumen_1520_mensual, by = "monthly_date") %>%
left_join(resumen_2025_mensual, by = "monthly_date") %>%
left_join(resumen_2530_mensual, by = "monthly_date") %>%
left_join(resumen_3035_mensual, by = "monthly_date") %>%
left_join(resumen_3540_mensual, by = "monthly_date") %>%
left_join(resumen_4245_mensual, by = "monthly_date")
}
# ----
main_base <- open_dataset(sprintf('%s/%s', data_dir, "panel_total_sample1045_t1019.parquet")) %>% glimpse()
main_base <- main_base %>%
mutate(score_1520 = if_else(puntaje>15    & puntaje<=20, 1, 0),
score_2025 = if_else(puntaje>20    & puntaje<=25, 1, 0),
score_2530 = if_else(puntaje>25    & puntaje<=30.56, 1, 0),
score_3035 = if_else(puntaje>30.56 & puntaje<=35, 1, 0),
score_3540 = if_else(puntaje>35    & puntaje<=40, 1, 0),
score_4045 = if_else(puntaje>40    & puntaje<=45, 1, 0)
) %>% collect()
# 3. Variable sets to apply function -------------------------------------------
# Variables de conteo
variables_conteo <- c("d_visitas_rips", "n_visitas_rips", "n_consultas", "n_hospitalizaciones",
"n_procedimientos", "n_urgencias", "c_preven", "c_prenat",
"d_registros_pila", "n_registros_pila", "pila_depen", "pila_indep",
"reg_contributivo", "reg_subsidiado", "reg_vinculado",
"reg_particular",  "reg_otro", "reg_desp_contributivo",
"reg_desp_subsidiado", "reg_desp_no_asegurado")
# Variables continuas
variables_continuas <- c("ibc_salud_max", "ibc_ccf_max", "ibc_pens_max", "ibc_rprof_max",
"income_base_max", "income_base_sum",
"sal_dias_cot_max", "sal_dias_cot_sum" )
# Crear data frames vacíos para guardar los resultados
results_count_yearly <- data.frame()
results_continuous_yearly <- data.frame()
# Iteración sobre variables de conteo
for (var in variables_conteo) {
temp_df <- calcular_stats_anuales(main_base, var, "conteo")
results_count_yearly <- if (nrow(results_count_yearly) == 0) temp_df else results_count_yearly %>% left_join(temp_df, by = "year")
}
# Iteración sobre variables continuas
for (var in variables_continuas) {
temp_df <- calcular_stats_anuales(main_base, var, "continuo")
results_continuous_yearly <- if (nrow(results_continuous_yearly) == 0) temp_df else results_continuous_yearly %>% left_join(temp_df, by = "year")
}
# Llamar a la función para calcular las estadísticas anuales de 'income_base_max'
estadisticas_income_anual <- calcular_estadisticas_ingreso_anual(main_base, "income_base_max")
# Crear data frames vacíos para guardar los resultados
results_count_monthly <- data.frame()
results_continuous_monthly <- data.frame()
# Iteración sobre variables de conteo
for (var in variables_conteo) {
temp_df <- calcular_stats(main_base, var, "conteo")
results_count_monthly <- if (nrow(results_count_monthly) == 0) temp_df else results_count_monthly %>% left_join(temp_df, by = "monthly_date")
}
# Iteración sobre variables continuas
for (var in variables_continuas) {
temp_df <- calcular_stats(main_base, var, "continuo")
results_continuous_monthly <- if (nrow(results_continuous_monthly) == 0) temp_df else results_continuous_monthly %>% left_join(temp_df, by = "monthly_date")
}
# Llamar a la función para calcular las estadísticas mensuales de 'income_base_max'
estadisticas_income_mensual <- calcular_estadisticas_ingreso_mensual(main_base, "income_base_max")
# ----
# 6. Unique reports -----------------------------------------------------------
# Inicializar el dataframe de resultados
results_unique_monthly <- data.frame()
# Definir grupos de puntaje
grupos_puntaje <- c("score_1520", "score_2025", "score_2530", "score_3035", "score_3540", "score_4045")
# Función para contar personas únicas con al menos un registro en el mes
calcular_unicos <- function(data, var_name) {
data %>%
filter(!!sym(var_name) == 1) %>%
group_by(monthly_date) %>%
summarise(
total = n_distinct(personabasicaid),  # Total de personas únicas
male = n_distinct(personabasicaid[genero == 1]),  # Hombres
female = n_distinct(personabasicaid[genero == 0]),  # Mujeres
edad_18_24 = n_distinct(personabasicaid[edad >= 18 & edad < 25]),  # Grupo de edad 18-24
edad_25_55 = n_distinct(personabasicaid[edad >= 25 & edad <= 55]),  # Grupo de edad 25-55
edad_55_mas = n_distinct(personabasicaid[edad > 55]),  # Grupo de edad 55+
score_1520 = n_distinct(personabasicaid[puntaje > 15 & puntaje <= 20]),  # Puntaje entre 15 y 20
score_2025 = n_distinct(personabasicaid[puntaje > 20 & puntaje <= 25]),  # Puntaje entre 20 y 25
score_2530 = n_distinct(personabasicaid[puntaje > 25 & puntaje <= 30.56]),  # Puntaje entre 25 y 30.56
score_3035 = n_distinct(personabasicaid[puntaje > 30.56 & puntaje <= 35]),  # Puntaje entre 30.56 y 35
score_3540 = n_distinct(personabasicaid[puntaje > 35 & puntaje <= 40]),  # Puntaje entre 35 y 40
score_4045 = n_distinct(personabasicaid[puntaje > 40 & puntaje <= 45]),  # Puntaje entre 40 y 45
#mujeres_25_55_score_2025 = n_distinct(personabasicaid[genero == 0 & edad >= 25 & edad <= 55 & puntaje >= 20 & puntaje < 25]),  # Mujeres 25-55 años y puntaje 20-25
#hombres_25_55_score_2025 = n_distinct(personabasicaid[genero == 1 & edad >= 25 & edad <= 55 & puntaje >= 20 & puntaje < 25]),  # Hombres 25-55 años y puntaje 20-25
# Repetir para otros grupos de puntaje
) %>%
rename_with(~paste0("un_", var_name, "_", .), -monthly_date)
}
# Variables dummy para contar personas únicas con registros
variables_unicos <- c("d_visitas_rips", "d_consultas", "d_hospitalizaciones",
"d_procedimientos", "d_urgencias", "d_preven", "d_prenat",
"d_registros_pila")
# Iteración sobre variables de conteo de personas únicas
for (var in variables_unicos) {
temp_df_unicos <- calcular_unicos(main_base, var)
if (nrow(results_unique_monthly) == 0) {
results_unique_monthly <- temp_df_unicos
} else {
results_unique_monthly <- left_join(results_unique_monthly, temp_df_unicos, by = "monthly_date")
}
}
View(results_unique_monthly)
main_base     <- open_dataset(sprintf('%s/%s', data_dir, "panel_total_sample1045_t1019.parquet")) %>%
filter(puntaje>=15 | puntaje<=45) %>%
collect()
summary(main_base)
main_base     <- open_dataset(sprintf('%s/%s', data_dir, "panel_total_sample1045_t1019.parquet")) %>%
filter(puntaje>=15 & puntaje<=45) %>%
collect()
summary(main_base)
# Date of creation: 30-Sep-2024
# Created by Brayan Pineda
# Objective: This code generates the info to update the total of registers between 2010-2019 by score.
#            This information allows to update the first table of all the project
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils", "rlang", "lubridate", "crayon", "purrr")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
#base_dir  <- "//wmedesrv/GAMMA/Christian Posso/_banrep_research/proyectos/project_transport_health"
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
#base_dir  <- "Z:/Christian Posso/_banrep_research/proyectos/project_transport_health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
figure_folder  <- file.path(output_folder, "figures")
# Initial databases ---------------------------------------------------------
main_base     <- open_dataset(sprintf('%s/%s', data_dir, "panel_total_sample1045_t1019.parquet")) %>%
filter(puntaje>=15 & puntaje<=45) %>%
collect()
entire_sample <- open_dataset(sprintf('%s/%s', data_dir, "base_pila_rips_pbid_monthly.parquet")) %>% collect()
# ----
# Paso 1: Filtrar personas con registros en PILA y RIPS entre 2010-2019 --------
# Crear una variable de año usando 'monthly_date'
main_base <- main_base %>%
mutate(year = year(monthly_date))  # Crear variable de año
entire_sample <- entire_sample %>%
mutate(year = year(monthly_date))  # Crear variable de año
# 1. Registros en RIPS entre 2010-2019
main_rips_1019 <- main_base %>%
filter(d_visitas_rips == 1 & year >= 2010 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# 2. Registros en PILA entre 2010-2019
main_pila_1019 <- main_base %>%
filter(d_registros_pila == 1 & year >= 2010 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# 3. Registros en PILA y RIPS entre 2010-2019
main_pila_rips_1019 <- main_base %>%
filter(d_visitas_rips == 1 & d_registros_pila == 1 & year >= 2010 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# 4. Registros en PILA o RIPS entre 2010-2019
main_pila_or_rips_1019 <- main_base %>%
filter((d_visitas_rips == 1 | d_registros_pila == 1) & year >= 2010 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# ----
# Paso 2: Crear los grupos de puntaje para el periodo 2010-2019 ----------------
crear_grupos_puntaje <- function(df) {
df %>%
mutate(
#           score_1015 = if_else(puntaje>10    & puntaje<=15, 1, 0),
score_1520 = if_else(puntaje>15    & puntaje<=20, 1, 0),
score_2025 = if_else(puntaje>20    & puntaje<=25, 1, 0),
score_2530 = if_else(puntaje>25    & puntaje<=30.56, 1, 0),
score_3035 = if_else(puntaje>30.56 & puntaje<=35, 1, 0),
score_3540 = if_else(puntaje>35    & puntaje<=40, 1, 0),
score_4045 = if_else(puntaje>40    & puntaje<=45, 1, 0)
)
}
main_rips_1019         <- crear_grupos_puntaje(main_rips_1019)
main_pila_1019         <- crear_grupos_puntaje(main_pila_1019)
main_pila_rips_1019    <- crear_grupos_puntaje(main_pila_rips_1019)
main_pila_or_rips_1019 <- crear_grupos_puntaje(main_pila_or_rips_1019)
# ----
# Paso 3: Resumir las personas por grupo de puntaje (para 2010-2019 ------------
resumir_personas <- function(df) {
df %>%
summarise(
total_personas = n_distinct(personabasicaid),  # Total de personas
#      personas_1015 = sum(score_1015),               # Personas con puntaje entre 10 y 15
personas_1520 = sum(score_1520),               # Personas con puntaje entre 15 y 20
personas_2025 = sum(score_2025),               # Personas con puntaje entre 20 y 25
personas_2530 = sum(score_2530),               # Personas con puntaje entre 25 y 30.56
personas_3035 = sum(score_3035),               # Personas con puntaje entre 30.56 y 35
personas_3540 = sum(score_3540),               # Personas con puntaje entre 35 y 40
personas_4045 = sum(score_4045)                # Personas con puntaje entre 40 y 45
)
}
# Resumen de personas para RIPS, PILA, PILA & RIPS, PILA o RIPS (2010-2019)
summary_rips_1019 <- resumir_personas(main_rips_1019)
summary_pila_1019 <- resumir_personas(main_pila_1019)
summary_pila_rips_1019 <- resumir_personas(main_pila_rips_1019)
summary_pila_or_rips_1019 <- resumir_personas(main_pila_or_rips_1019)
# ----
# Paso 4: Filtrar para 2015-2019 -----------------------------------------------
# Filtrar personas con registros en PILA y RIPS entre 2015-2019
main_rips_1519 <- main_base %>%
filter(d_visitas_rips == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
main_pila_1519 <- main_base %>%
filter(d_registros_pila == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
main_pila_rips_1519 <- main_base %>%
filter(d_visitas_rips == 1 & d_registros_pila == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
main_pila_or_rips_1519 <- main_base %>%
filter((d_visitas_rips == 1 | d_registros_pila == 1) & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# Crear los grupos de puntaje
main_rips_1519 <- crear_grupos_puntaje(main_rips_1519)
main_pila_1519 <- crear_grupos_puntaje(main_pila_1519)
main_pila_rips_1519 <- crear_grupos_puntaje(main_pila_rips_1519)
main_pila_or_rips_1519 <- crear_grupos_puntaje(main_pila_or_rips_1519)
# Resumen para 2015-2019
summary_rips_1519 <- resumir_personas(main_rips_1519)
summary_pila_1519 <- resumir_personas(main_pila_1519)
summary_pila_rips_1519 <- resumir_personas(main_pila_rips_1519)
summary_pila_or_rips_1519 <- resumir_personas(main_pila_or_rips_1519)
# ----
summary_rips_1019         <- summary_rips_1019         %>% mutate(origen = "MAIN_RIPS-1019")
summary_pila_1019         <- summary_pila_1019         %>% mutate(origen = "MAIN_PILA-1019")
summary_pila_rips_1019    <- summary_pila_rips_1019    %>% mutate(origen = "MAIN_RIPS_AND_PILA_1019")
summary_pila_or_rips_1019 <- summary_pila_or_rips_1019 %>% mutate(origen = "MAIN_RIPS_OR_PILA_1019")
summary_rips_1519         <- summary_rips_1519         %>% mutate(origen = "MAIN_RIPS_1519")
summary_pila_1519         <- summary_pila_1519         %>% mutate(origen = "MAIN_PILA_1519")
summary_pila_rips_1519    <- summary_pila_rips_1519    %>% mutate(origen = "MAIN_RIPS_AND_PILA_1519")
summary_pila_or_rips_1519 <- summary_pila_or_rips_1519 %>% mutate(origen = "MAIN_RIPS_OR_PILA_1519")
# ----
# Paso 5: Filtrar para 2015-2019 en la base completa ---------------------------
# Filtrar personas con registros en PILA y RIPS entre 2015-2019
entire_rips_1519 <- entire_sample %>%
filter(d_visitas_rips == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
entire_pila_1519 <- entire_sample %>%
filter(d_registros_pila == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
entire_pila_rips_1519 <- entire_sample %>%
filter(d_visitas_rips == 1 & d_registros_pila == 1 & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
entire_pila_or_rips_1519 <- entire_sample %>%
filter((d_visitas_rips == 1 | d_registros_pila == 1) & year >= 2015 & year <= 2019) %>%
select(personabasicaid, puntaje) %>%
unique()
# Crear los grupos de puntaje
entire_rips_1519 <- crear_grupos_puntaje(entire_rips_1519)
entire_pila_1519 <- crear_grupos_puntaje(entire_pila_1519)
entire_pila_rips_1519 <- crear_grupos_puntaje(entire_pila_rips_1519)
entire_pila_or_rips_1519 <- crear_grupos_puntaje(entire_pila_or_rips_1519)
# Resumen para 2015-2019
summary_entire_rips_1519 <- resumir_personas(entire_rips_1519)
summary_entire_pila_1519 <- resumir_personas(entire_pila_1519)
summary_entire_pila_rips_1519 <- resumir_personas(entire_pila_rips_1519)
summary_entire_pila_or_rips_1519 <- resumir_personas(entire_pila_or_rips_1519)
summary_entire_rips_1519         <- summary_entire_rips_1519         %>% mutate(origen = "ENTIRE_RIPS_1519")
summary_entire_pila_1519         <- summary_entire_pila_1519         %>% mutate(origen = "ENTIRE_PILA_1519")
summary_entire_pila_rips_1519    <- summary_entire_pila_rips_1519    %>% mutate(origen = "ENTIRE_RIPS_AND_PILA_1519")
summary_entire_pila_or_rips_1519 <- summary_entire_pila_or_rips_1519 %>% mutate(origen = "ENTIRE_RIPS_OR_PILA_1519")
# Combinar todos los resúmenes en un solo dataframe
summary_total <- bind_rows(summary_rips_1019,
summary_pila_1019,
summary_pila_rips_1019,
summary_pila_or_rips_1019,
summary_rips_1519,
summary_pila_1519,
summary_pila_rips_1519,
summary_pila_or_rips_1519,
summary_entire_rips_1519,
summary_entire_pila_1519,
summary_entire_pila_rips_1519,
summary_entire_pila_or_rips_1519)
write_parquet(summary_total, file.path(output_folder, "parquet/20240930-stats_set5_step7.parquet"))
# Filtrar los objetos que comienzan con 'main_p', 'main_r', 'summary_r', o 'summary_p'
objetos_a_eliminar <- ls(pattern = "^(main_p|main_r|summary_r|summary_p|entire|summary_e)")
# Eliminar los objetos filtrados
rm(list = objetos_a_eliminar)
View(summary_total)
paquetes <- c("rddensity", "writexl", "arrow", "tidyverse", "haven", "dplyr", "openxlsx", "ggplot2", "rdrobust", "cowplot", "ragg", "R.utils")
for (paquete in paquetes) {
if (!require(paquete, character.only = TRUE)) {
install.packages(paquete)
library(paquete, character.only = TRUE)
}
}
# Directory and creating a new folder to save all the results
base_dir  <- "D:/Steban Pineda/Documents/DIME/Transportation and health"
project_folder <- base_dir
data_dir       <- file.path(base_dir, "data")
output_folder  <- file.path(base_dir, "outputs")
# Reading results from 30-sep-2024, results with descriptives
count_step1 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step1.parquet')) %>% collect
count_step2 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step2.parquet')) %>% collect
count_step3 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step3.parquet')) %>% collect
count_step4 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step4.parquet')) %>% collect
count_step5 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step5.parquet')) %>% collect
count_step6 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step6.parquet')) %>% collect
count_step7 <- open_dataset(sprintf('%s/%s', output_folder, 'parquet/20240930-stats_set5_step7.parquet')) %>% collect
# Crear un nuevo workbook
wb <- createWorkbook()
# Añadir hojas al workbook con los dataframes correspondientes
addWorksheet(wb, "Step 1")
writeData(wb, "Step 1", count_step1)
addWorksheet(wb, "Step 2")
writeData(wb, "Step 2", count_step2)
addWorksheet(wb, "Step 3")
writeData(wb, "Step 3", count_step3)
addWorksheet(wb, "Step 4")
writeData(wb, "Step 4", count_step4)
addWorksheet(wb, "Step 5")
writeData(wb, "Step 5", count_step5)
addWorksheet(wb, "Step 6")
writeData(wb, "Step 6", count_step6)
addWorksheet(wb, "Step 7")
writeData(wb, "Step 7", count_step7)
saveWorkbook(wb, file = sprintf('%s/20240930 - general_counters.xlsx', output_folder), overwrite = TRUE)
# Nombres de los archivos parquet y las hojas que se crearán en el Excel
file_names <- c(
"20240930-stats_set5_income_y.parquet",
"20240930-stats_set5_income_m.parquet",
"20240930-stats_set5_cont_y.parquet",
"20240930-stats_set5_cont_m.parquet",
"20240930-stats_set5_count_y.parquet",
"20240930-stats_set5_count_m.parquet",
"20240930-stats_set5_unique_m.parquet"
)
# Extraer nombres para las hojas del Excel
sheet_names <- sub(".*set5_(.*)\\.parquet", "\\1", file_names)
# Crear un nuevo archivo Excel
excel_file <- createWorkbook()
# Leer cada archivo .parquet y agregarlo como una hoja al Excel
for (i in seq_along(file_names)) {
file_path <- sprintf('%s/parquet/%s', output_folder, file_names[i])
results <- open_dataset(file_path) %>% collect()
# Agregar hoja al archivo Excel
addWorksheet(excel_file, sheetName = sheet_names[i])
writeData(excel_file, sheet = sheet_names[i], x = results)
}
# Guardar el archivo Excel
saveWorkbook(excel_file, file = file.path(output_folder, "20240930-all_results.xlsx"), overwrite = TRUE)
View(count_step7)
37626+32050+31303+46659+27125+14838
